<?xml version="1.0" encoding="utf-8"?>

<!--
//////////////////////////////////////////////////////////////////////////////////////
//
//    Copyright 2012 Adobe Systems Incorporated
//
//    This file is part of TMX to Moses Corpus Tool.
// 
//    TMX to Moses Corpus Tool is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Lesser General Public License as published by the 
//    Free Software Foundation, either version 3 of the License, or (at your option) 
//    any later version.
// 
//    TMX to Moses Corpus Tool is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
//    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for 
//    more details.
// 
//    You should have received a copy of the GNU Lesser General Public License along 
//    with TMX to Moses Corpus Tool.  If not, see <http://www.gnu.org/licenses/>.
//
//////////////////////////////////////////////////////////////////////////////////////
-->

<stepBox:StepBoxBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
					 xmlns:s="library://ns.adobe.com/flex/spark" 
					 xmlns:mx="library://ns.adobe.com/flex/mx" 
					 xmlns:stepBox="com.Adobe.comps.stepBox.*"
					 creationComplete="hgroup1_creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.Adobe.events.StepEvent;
			
			import mx.events.FlexEvent;
			import mx.events.NumericStepperEvent;
			
			override public function set selected(value:Boolean):void
			{
				clean_long_sentence.selected = value;
			}
			
			override public function get selected():Boolean
			{
				return clean_long_sentence.selected;
			}
			
			public function set sourceThreshold(value:uint):void
			{
				srcLen.value = value;
			}
			
			public function get sourceThreshold():uint
			{
				return srcLen.value;
			}
			
			public function set targetThreshold(value:uint):void
			{
				targLen.value = value;
			}
			
			public function get targetThreshold():uint
			{
				return targLen.value;
			}
			
			
			protected function hgroup1_creationCompleteHandler(event:FlexEvent):void
			{
				addEventListener(StepEvent.Step_Order_Changed, StepOrderChangeHandler);
			}
			
			protected function StepOrderChangeHandler(event:StepEvent):void
			{
				stepID.text = "Step " + (parent.getChildIndex(this)+1)/2 + ".";
			}


			protected function clean_long_sentence_changeHandler(event:Event):void
			{
				dispatchEvent(new StepEvent(StepEvent.Step_State_Changed));
			}


			protected function srcLen_changeHandler(event:NumericStepperEvent):void
			{
				var parameters:Array = new Array("0");
				
				parameters.push(event.target.value);
				
				dispatchEvent(new StepEvent(StepEvent.Step_Parameter_Changed,parameters));
			}
			
			protected function targLen_changeHandler(event:NumericStepperEvent):void
			{
				var parameters:Array = new Array("1");
				
				parameters.push(event.target.value);
								
				dispatchEvent(new StepEvent(StepEvent.Step_Parameter_Changed,parameters));
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:VGroup width="100%">
		<s:HGroup width="100%" verticalAlign="middle">
			<mx:Label id="stepID" text="Step {this.defaultOrder}." fontWeight="bold"/>
			<mx:CheckBox id="clean_long_sentence" 
						 label="Clean long sentences" change="clean_long_sentence_changeHandler(event)"/>
		</s:HGroup>
		<s:VGroup width="100%" id="clean_long_sentence_option" enabled="{clean_long_sentence.selected}">
			<s:HGroup width="100%" verticalAlign="middle">
				<s:VGroup width="65" height="100%"/>
				<mx:CheckBox id="srcLenBox" 
							 label="source longer than" 
							 selected="true"/>
				<mx:NumericStepper id="srcLen" 
								   minimum="0"  maximum="200" 
								   enabled="{srcLenBox.selected}" 
								   change="srcLen_changeHandler(event)"/>
				<mx:Text text="words"/>
			</s:HGroup>
			<s:HGroup width="100%" verticalAlign="middle">
				<s:VGroup width="65" height="100%"/>
				<mx:CheckBox id="targLenBox" 
							 label="target longer than" 
							 selected="true"/>
				<mx:NumericStepper id="targLen" 
								   minimum="0" maximum="200" 
								   enabled="{targLenBox.selected}" 
								   change="targLen_changeHandler(event)"/>
				<mx:Text text="words"/>
			</s:HGroup>
		</s:VGroup>			
	</s:VGroup>
</stepBox:StepBoxBase>
